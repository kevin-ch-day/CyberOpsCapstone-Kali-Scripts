#!/bin/bash
# -----------------------------------------------------------------------------
# Script Name: apk_decompiler.sh
# Purpose:     Automates the decompilation of APK files, extracting and analyzing
#              the source code using apktool, jadx, and dex2jar. Optionally performs
#              static analysis on the extracted code.
# Author:      [Your Name]
# Date:        [Date]
# Version:     2.0
# -----------------------------------------------------------------------------

# =========================
# Configuration Parameters
# =========================

# Set directories
DECOMPILE_DIR="decompiled"
LOG_DIR="logs"
STATIC_ANALYSIS_DIR="static_analysis"

# Set log file
LOG_FILE="$LOG_DIR/apk_decompiler_$(date +%F).log"

# =========================
# Function Definitions
# =========================

# Function to print a section header
print_header() {
    echo "============================================================="
    echo "$1"
    echo "============================================================="
}

# Function to log messages
log_message() {
    echo "$(date +%F_%T) - $1" | tee -a "$LOG_FILE"
}

# Function to check if required tools are installed
check_tools() {
    local missing_tools=0
    for tool in apktool jadx d2j-dex2jar; do
        if ! command -v $tool &> /dev/null; then
            log_message "Error: $tool is not installed."
            missing_tools=$((missing_tools + 1))
        fi
    done
    if [ $missing_tools -ne 0 ]; then
        log_message "Please install the missing tools and try again."
        exit 1
    fi
}

# Function to decompile an APK file
decompile_apk() {
    local apk_file="$1"
    local base_name=$(basename "$apk_file" .apk)
    local output_dir="$DECOMPILE_DIR/$base_name"

    mkdir -p "$output_dir"

    print_header "Decompiling APK: $apk_file"
    log_message "Decompiling $apk_file..."

    # Run apktool
    log_message "Running apktool..."
    apktool d "$apk_file" -o "$output_dir/apktool_out" &>> "$LOG_FILE"
    if [ $? -eq 0 ]; then
        log_message "apktool decompilation successful."
    else
        log_message "Error: apktool decompilation failed."
    fi

    # Run JADX
    log_message "Running JADX..."
    jadx -d "$output_dir/jadx_out" "$apk_file" &>> "$LOG_FILE"
    if [ $? -eq 0 ]; then
        log_message "JADX decompilation successful."
    else
        log_message "Error: JADX decompilation failed."
    fi

    # Run dex2jar
    log_message "Running dex2jar..."
    d2j-dex2jar "$apk_file" -o "$output_dir/$base_name-dex2jar.jar" &>> "$LOG_FILE"
    if [ $? -eq 0 ]; then
        log_message "dex2jar conversion successful."
    else
        log_message "Error: dex2jar conversion failed."
    fi

    log_message "Decompilation complete. Results saved in $output_dir."
}

# Function to perform static analysis (optional)
perform_static_analysis() {
    local apk_file="$1"
    local base_name=$(basename "$apk_file" .apk)
    local analysis_dir="$STATIC_ANALYSIS_DIR/$base_name"

    mkdir -p "$analysis_dir"

    print_header "Performing Static Analysis on: $apk_file"
    log_message "Static analysis on $apk_file..."

    # Example static analysis: count the number of classes, methods, and strings
    log_message "Counting classes, methods, and strings..."
    grep -r "class " "$DECOMPILE_DIR/$base_name/jadx_out" | wc -l > "$analysis_dir/class_count.txt"
    grep -r "method " "$DECOMPILE_DIR/$base_name/jadx_out" | wc -l > "$analysis_dir/method_count.txt"
    grep -r "\".*\"" "$DECOMPILE_DIR/$base_name/jadx_out" | wc -l > "$analysis_dir/string_count.txt"

    log_message "Static analysis complete. Results saved in $analysis_dir."
}

# Function to clean up any temporary files (if necessary)
clean_up() {
    log_message "Cleaning up temporary files..."
    # Add any cleanup steps if needed
    log_message "Cleanup complete."
}

# Main script execution
main() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: $0 <apk-file1> [<apk-file2> ...] [--analyze]"
        exit 1
    fi

    # Create necessary directories
    mkdir -p "$DECOMPILE_DIR" "$LOG_DIR" "$STATIC_ANALYSIS_DIR"

    # Check if required tools are installed
    check_tools

    # Decompile each APK file provided as argument
    local analyze=false
    for arg in "$@"; do
        if [ "$arg" == "--analyze" ]; then
            analyze=true
        elif [ -f "$arg" ]; then
            decompile_apk "$arg"
            if [ "$analyze" == true ]; then
                perform_static_analysis "$arg"
            fi
        else
            log_message "File not found: $arg"
        fi
    done

    # Clean up if needed
    clean_up
}

# Execute the main function
main "$@"